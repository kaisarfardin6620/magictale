services:
  python-app:
    build:
      context: .
    container_name: python-app
    restart: unless-stopped
    init: true
    env_file: ./.env
    entrypoint: /app/docker-entrypoint.sh
    command: ["daphne", "-b", "0.0.0.0", "-p", "8000", "magictale.asgi:application"]
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - postgres-db
      - redis-cache
    networks:
      - backend

  celery-worker:
    build:
      context: .
    container_name: celery-worker
    restart: unless-stopped
    init: true
    env_file: ./.env
    command: ["celery", "-A", "magictale", "worker", "--loglevel=info"]
    volumes:
      - media_volume:/app/media 
    depends_on:
      - postgres-db
      - redis-cache
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8040:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - python-app
    networks:
      - backend

  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-magictale}
      POSTGRES_USER: ${POSTGRES_USER:-magictale}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-magictale}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-magictale}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis-cache:
    image: redis:latest
    container_name: redis-cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  backend:
    driver: bridge